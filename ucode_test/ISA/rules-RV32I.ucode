// Section definition
//  - each rule is in it's own section
//  - all unspecified .INPUTS are ignored
//  - all unspecified .OUTPUTS get their default value (0 if not defined)
//
//  .RULE { (<input_filter>), (output_setting) }
//
//    <input_filter>   = <input_name>=<value>, ...
//    <output_setting> = <output_name>=<value>, ...
//                       if <value> is unspecified the output get its inverted default value
//    <input_name>     can be an .INPUT(S) or a .SIGNAL(S)
//    <value>          can be a number or a .CONSTANT(S)

// LUI
.RULE { (opcode=0b01101),               (Imm_ctrl=U_type, Imm_mux=IMM, rd_en) }
// AUIPC
.RULE { (opcode=0b00101),               (Imm_ctrl=U_type) }

// JAL
.RULE { (opcode=0b11011),               (Imm_ctrl=J_type) }
// JALR
.RULE { (opcode=0b11001, funct3=0b000), (Imm_ctrl=I_type) }

// BEQ
.RULE { (opcode=0b11000, funct3=0b000), (Imm_ctrl=B_type) }
// BNE
.RULE { (opcode=0b11000, funct3=0b001), (Imm_ctrl=B_type) }
// BLT
.RULE { (opcode=0b11000, funct3=0b100), (Imm_ctrl=B_type) }
// BGE
.RULE { (opcode=0b11000, funct3=0b101), (Imm_ctrl=B_type) }
// BLTU
.RULE { (opcode=0b11000, funct3=0b110), (Imm_ctrl=B_type) }
// BGEU
.RULE { (opcode=0b11000, funct3=0b111), (Imm_ctrl=B_type) }

// LB
.RULE { (opcode=0b00000, funct3=0b000), (Imm_ctrl=I_type) }
// LH
.RULE { (opcode=0b00000, funct3=0b001), (Imm_ctrl=I_type) }
// LW
.RULE { (opcode=0b00000, funct3=0b010), (Imm_ctrl=I_type) }
// LBU
.RULE { (opcode=0b00000, funct3=0b100), (Imm_ctrl=I_type) }
// LHU
.RULE { (opcode=0b00000, funct3=0b101), (Imm_ctrl=I_type) }

// SB
.RULE { (opcode=0b01000, funct3=0b000), (Imm_ctrl=S_type) }
// SH
.RULE { (opcode=0b01000, funct3=0b001), (Imm_ctrl=S_type) }
// SW
.RULE { (opcode=0b01000, funct3=0b010), (Imm_ctrl=S_type) }

// ADDI
.RULE { (opcode=0b00100, funct3=0b000),                   (Imm_ctrl=I_type) }
// SLLI
.RULE { (opcode=0b00100, funct3=0b001, funct7=0b0000000), (Imm_ctrl=I_type) }
// SRLI
.RULE { (opcode=0b00100, funct3=0b101, funct7=0b0000000), (Imm_ctrl=I_type) }
// SRAI
.RULE { (opcode=0b00100, funct3=0b101, funct7=0b0100000), (Imm_ctrl=I_type) }
// XORI
.RULE { (opcode=0b00100, funct3=0b100),                   (Imm_ctrl=I_type) }
// ORI
.RULE { (opcode=0b00100, funct3=0b110),                   (Imm_ctrl=I_type) }
// ANDI
.RULE { (opcode=0b00100, funct3=0b111),                   (Imm_ctrl=I_type) }
// SLTI
.RULE { (opcode=0b00100, funct3=0b010),                   (Imm_ctrl=I_type) }
// SLTIU
.RULE { (opcode=0b00100, funct3=0b011),                   (Imm_ctrl=I_type) }

// ADD
.RULE { (opcode=0b01100, funct3=0b000, funct7=0b0000000), (Imm_ctrl=R_type) }
// SUB
.RULE { (opcode=0b01100, funct3=0b000, funct7=0b0100000), (Imm_ctrl=R_type) }
// SLL
.RULE { (opcode=0b01100, funct3=0b001, funct7=0b0000000), (Imm_ctrl=R_type) }
// SRL
.RULE { (opcode=0b01100, funct3=0b101, funct7=0b0000000), (Imm_ctrl=R_type) }
// SRA
.RULE { (opcode=0b01100, funct3=0b101, funct7=0b0100000), (Imm_ctrl=R_type) }
// XOR
.RULE { (opcode=0b01100, funct3=0b100, funct7=0b0000000), (Imm_ctrl=R_type) }
// OR
.RULE { (opcode=0b01100, funct3=0b110, funct7=0b0000000), (Imm_ctrl=R_type) }
// AND
.RULE { (opcode=0b01100, funct3=0b111, funct7=0b0000000), (Imm_ctrl=R_type) }
// SLT
.RULE { (opcode=0b01100, funct3=0b010, funct7=0b0000000), (Imm_ctrl=R_type) }
// SLTU
.RULE { (opcode=0b01100, funct3=0b011, funct7=0b0000000), (Imm_ctrl=R_type) }

// FENCE
.RULE { (opcode=0b00011, funct3=0b000, funct7=0b0000000), (Imm_ctrl=I_type) }
// FENCE.TSO (optional)
//.RULE { (opcode=0b00011, funct3=0b000, funct7=0b0000000), (Imm_ctrl=I_type) }

// ECALL
.RULE { (opcode=0b11100, funct3=0b000, funct7=0b0000000, rs2=0b00000, rs1=0b00000, rd=0b00000), (Imm_ctrl=I_type) }
// EBREAK
.RULE { (opcode=0b11100, funct3=0b000, funct7=0b0000000, rs2=0b00001, rs1=0b00000, rd=0b00000), (Imm_ctrl=I_type) }



// some spezial opcodes

// NOP (pseudoinst.) encoded as ADDI x0, x0, 0
//.RULE { (opcode=0b00100, funct3=0b000, funct7=0b0000000, rs2=0b00000, rs1=0b00000, rd=0b00000), (Imm_ctrl=I_type) }
